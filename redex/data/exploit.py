import os.path as op
from dataclasses import dataclass
from pathlib import Path


class Exploit(object):
	def __init__(self, filename: Path) -> None:
		self.name = filename.stem
		_, self.extension = op.splitext(str(filename))
		self.path = filename


@dataclass
class ExploitHandler(object):
	# Bash scripts
	bash_privesc_mount_host_fs : Exploit = Exploit(Path("exploits/code/bash/privesc/mount_host_fs.sh").absolute())
	bash_privesc_ssh_host	   : Exploit = Exploit(Path("exploits/code/bash/privesc/ssh_host.sh").absolute())
	bash_privesc_pyhttp_inject : Exploit = Exploit(Path("exploits/code/bash/privesc/pyhttp_inject.sh").absolute())

	# Python Scripts
	python_mitm_arp_mitm : Exploit = Exploit(Path("exploits/code/python/mitm/arp_mitm.py").absolute())

	def __str__(self) -> str:
		exploits_str = ["List of all the exploits of the current session:"]
		for exp_name, exp_instance in self.__dict__.items():
			if not isinstance(exp_instance, Exploit): continue
			exploits_str.append(f"    - {exp_name} -> {str(exp_instance.path)}")

		return "\n".join(exploits_str)